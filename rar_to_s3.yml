---
- name: File Rar, Unzipping, Renaming, and Uploading to S3
  hosts: all
  become: yes
  vars:
    source_folder: "/tmp/ansible"
    archive_name: "/tmp/my_archive.rar"
    unzip_folder: "/tmp/unzipped_folder"
    old_file_name: "test_file.txt"
    new_file_name: "new_test.txt"
    s3_bucket: "swapnil008"

  tasks:
    - name: Install required packages (e.g., `rar` and `unrar` for Debian-based systems)
      apt:
        name: [rar, unrar]
        state: present
      when: ansible_os_family == "Debian"

    - name: Install required packages (e.g., `rar` and `unrar` for RedHat-based systems)
      yum:
        name: [rar, unrar]
        state: present
      when: ansible_os_family == "RedHat"

    - name: Verify source folder exists
      stat:
        path: "{{ source_folder }}"
      register: source_folder_status

    - name: Fail if source folder does not exist
      fail:
        msg: "The source folder {{ source_folder }} does not exist."
      when: not source_folder_status.stat.exists

    - name: Populate source folder with a test file (if needed)
      copy:
        content: "This is a test file."
        dest: "{{ source_folder }}/test_file.txt"
      when: source_folder_status.stat.exists and source_folder_status.stat.isdir

    - name: List files in the source folder
      command: ls -l "{{ source_folder }}"
      register: source_files

    - debug:
        msg: "Files in the source folder: {{ source_files.stdout_lines }}"

    - name: Create a RAR archive
      shell: rar a "{{ archive_name }}" "{{ source_folder }}/*"
      args:
        warn: false

    - name: Test the RAR archive
      command: rar v "{{ archive_name }}"
      register: rar_test

    - debug:
        msg: "RAR archive contents: {{ rar_test.stdout_lines }}"

    - name: Create unzip folder if it does not exist
      file:
        path: "{{ unzip_folder }}"
        state: directory

    - name: Extract the RAR archive with full paths
      shell: unrar x "{{ archive_name }}" "{{ unzip_folder }}"
      args:
        warn: false

    - name: Find the extracted file
      find:
        paths: "{{ unzip_folder }}"
        patterns: "{{ old_file_name }}"
      register: found_file

    - name: Debug found file path
      debug:
        msg: "Found file path: {{ found_file.files[0].path }}"
      when: found_file.matched > 0

    - name: Rename the unzipped file
      command: mv "{{ found_file.files[0].path }}" "{{ unzip_folder }}/{{ new_file_name }}"
      when: found_file.matched > 0

    - name: Upload the renamed file to an S3 bucket
      shell: aws s3 cp "{{ unzip_folder }}/{{ new_file_name }}" s3://{{ s3_bucket }}/
      args:
        warn: false
